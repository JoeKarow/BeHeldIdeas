"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onPostBuild = exports.onBuild = exports.onPreBuild = void 0;
const path_1 = __importStar(require("path"));
const process_1 = __importDefault(require("process"));
const common_tags_1 = require("common-tags");
const fs_extra_1 = require("fs-extra");
const cache_1 = require("./helpers/cache");
const config_1 = require("./helpers/config");
const files_1 = require("./helpers/files");
const functions_1 = require("./helpers/functions");
const verification_1 = require("./helpers/verification");
const DEFAULT_FUNCTIONS_SRC = 'netlify/functions';
async function onPreBuild({ constants, utils, netlifyConfig, }) {
    const { PUBLISH_DIR } = constants;
    // Print a helpful message if the publish dir is misconfigured
    if (!PUBLISH_DIR || process_1.default.cwd() === path_1.default.resolve(PUBLISH_DIR)) {
        utils.build.failBuild(`Gatsby sites must publish the "public" directory, but your site’s publish directory is set to “${PUBLISH_DIR}”. Please set your publish directory to your Gatsby site’s "public" directory.`);
    }
    await (0, cache_1.restoreCache)({ utils, publish: PUBLISH_DIR });
    await (0, config_1.checkConfig)({ utils, netlifyConfig });
}
exports.onPreBuild = onPreBuild;
async function onBuild({ constants, netlifyConfig, }) {
    const { PUBLISH_DIR, FUNCTIONS_SRC = DEFAULT_FUNCTIONS_SRC, INTERNAL_FUNCTIONS_SRC, } = constants;
    const cacheDir = (0, cache_1.normalizedCacheDir)(PUBLISH_DIR);
    if (INTERNAL_FUNCTIONS_SRC &&
        (0, fs_extra_1.existsSync)(path_1.default.join(FUNCTIONS_SRC, 'gatsby'))) {
        console.log((0, common_tags_1.stripIndent) `
    Detected the function "${path_1.default.join(FUNCTIONS_SRC, 'gatsby')}" that seem to have been generated by an old version of the Essential Gatsby plugin. 
The plugin no longer uses this and it should be deleted to avoid conflicts.\n`);
    }
    if ((0, config_1.shouldSkipFunctions)(cacheDir)) {
        await (0, functions_1.deleteFunctions)(constants);
        return;
    }
    const compiledFunctionsDir = path_1.default.join(cacheDir, '/functions');
    await (0, functions_1.writeFunctions)({ constants, netlifyConfig });
    (0, config_1.mutateConfig)({ netlifyConfig, cacheDir, compiledFunctionsDir });
    const root = (0, path_1.dirname)(netlifyConfig.build.publish);
    await (0, files_1.patchFile)(root);
    await (0, files_1.relocateBinaries)(root);
    // Editing _redirects so it works with ntl dev
    (0, config_1.spliceConfig)({
        startMarker: '# @netlify/plugin-gatsby redirects start',
        endMarker: '# @netlify/plugin-gatsby redirects end',
        contents: '/api/* /.netlify/functions/__api 200',
        fileName: (0, path_1.join)(netlifyConfig.build.publish, '_redirects'),
    });
}
exports.onBuild = onBuild;
async function onPostBuild({ constants: { PUBLISH_DIR, FUNCTIONS_DIST }, utils, }) {
    await (0, cache_1.saveCache)({ publish: PUBLISH_DIR, utils });
    for (const func of ['api', 'dsg', 'ssr']) {
        await (0, verification_1.checkZipSize)(path_1.default.join(FUNCTIONS_DIST, `__${func}.zip`));
    }
}
exports.onPostBuild = onPostBuild;
